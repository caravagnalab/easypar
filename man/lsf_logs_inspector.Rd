% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsf_monitor.R
\name{lsf_logs_inspector}
\alias{lsf_logs_inspector}
\title{Inspects the logs of an LSF array job.}
\usage{
lsf_logs_inspector(PID, errors_folder, input_file, delete_files = TRUE)
}
\arguments{
\item{PID}{Process identier, it should appear in the names of the logfiles.}

\item{errors_folder}{A folder with logs to inspect.}

\item{input_file}{The input file associated to the job, if not \code{NULL} the
inputs for the runs with error are shown to screen.}
}
\value{
A tibble with the name of the jobs analysed, file
references and output status.
}
\description{
If your an array job generated through `easypar`'s function \code{run_lsf},
you can use this function to inspect the logs. The functions takes a process
identifier (PID), and then scans logs in a folder selecting those
belonging to the array jobs run with that PID. For every output file, the
standard LSF closing text \code{"Successfully completed."} is searched for.
If it is not found the relative error file is scanned to find the error message
(grepping an \code{"Error"} term in the file), and displayed to screen. Log
files for jobs run succesfully are compressed into a zip file stored in the log
folders, and error logs are retained. The list of input(s) that are
associated with error logs is also print to screen, and a summary table is retuned.
}
\examples{
# very dummy example function
FUN = function(x, y){ print(x, y) }

# input for 25 array jobs
PARAMS = data.frame(x = runif(25), y = runif(25))

\dontrun{
# not run 
run_lsf(FUN, PARAMS)

# Once logs are produced... we can inspect them
 
# inspect using default params (as in job submission)
lsf_logs_inspector(PID = 1234, errors_folder = 'log', input_file = 'EASYPAR_LSF_input_jobarray.csv')
}

}
\seealso{
\code{\link{run_lsf}}
}
